name: "terraform"
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
env:
  tf_version: "latest"
  tf_working_dir: "."
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS_READ_ALL_PROJECTS }}
  GOOGLE_PROJECT: ${{ secrets.TERRATEST_GOOGLE_PROJECT }}
  TF_VAR_google_credentials: ${{ secrets.TERRATEST_GOOGLE_CREDENTIALS }}
  TF_VAR_google_project: ${{ secrets.TERRATEST_GOOGLE_CREDENTIALS }}
  TF_VAR_google_region: ${{ secrets.TERRATEST_GOOGLE_REGION }}
jobs:
  terraform:
    name: "terraform"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tests: [ "create_mysql_instance_with_public_ip" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
          token: ${{ secrets.ENGINEERING_GITHUB_PERSONAL_ACCESS_TOKEN }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: make lint
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.ENGINEERING_GITHUB_PERSONAL_ACCESS_TOKEN }}

      - name: Terraform Init
        id: init
        run: cd examples/${{ matrix.tests }}; terraform init

      - name: Terraform Validate
        id: validate
        run: cd examples/${{ matrix.tests }}; terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: cd examples/create_mysql_instance_with_public_ip; terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v4
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.ENGINEERING_GITHUB_PERSONAL_ACCESS_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
